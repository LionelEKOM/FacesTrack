#!/usr/bin/env python3
"""
Script de test pour le syst√®me de QR Code FaceTrack
Ce script teste la g√©n√©ration et la lecture de QR codes
"""

import os
import sys
import django
from django.conf import settings

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'FaceTrack.settings')
django.setup()

from school.models import Eleve, User, Classe
import qrcode
from PIL import Image
import io
import base64

def test_qr_code_generation():
    """Test de g√©n√©ration de QR codes pour les √©l√®ves"""
    print("üß™ Test de g√©n√©ration de QR codes...")
    
    try:
        # R√©cup√©rer quelques √©l√®ves de test
        eleves = Eleve.objects.all()[:3]
        
        if not eleves:
            print("‚ùå Aucun √©l√®ve trouv√© dans la base de donn√©es")
            return False
        
        for eleve in eleves:
            print(f"\nüì± G√©n√©ration du QR code pour {eleve.user.get_full_name()}")
            print(f"   Matricule: {eleve.matricule}")
            
            # G√©n√©rer le QR code
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(eleve.matricule)
            qr.make(fit=True)
            
            # Cr√©er l'image
            img = qr.make_image(fill_color="black", back_color="white")
            
            # Sauvegarder temporairement
            filename = f"test_qr_{eleve.matricule}.png"
            img.save(filename)
            print(f"   ‚úÖ QR code g√©n√©r√© et sauvegard√©: {filename}")
            
            # Test de lecture (simulation)
            print(f"   üîç Contenu du QR code: {eleve.matricule}")
            
            # Nettoyer
            os.remove(filename)
        
        print("\n‚úÖ Test de g√©n√©ration de QR codes r√©ussi !")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de g√©n√©ration: {e}")
        return False

def test_qr_code_model_method():
    """Test de la m√©thode get_qr_code_base64 du mod√®le Eleve"""
    print("\nüß™ Test de la m√©thode get_qr_code_base64...")
    
    try:
        eleve = Eleve.objects.first()
        if not eleve:
            print("‚ùå Aucun √©l√®ve trouv√© pour le test")
            return False
        
        print(f"üì± Test avec l'√©l√®ve: {eleve.user.get_full_name()}")
        
        # Appeler la m√©thode
        qr_base64 = eleve.get_qr_code_base64()
        
        if qr_base64 and qr_base64.startswith('data:image/png;base64,'):
            print("   ‚úÖ QR code base64 g√©n√©r√© avec succ√®s")
            print(f"   üìè Taille: {len(qr_base64)} caract√®res")
            
            # D√©coder et v√©rifier
            try:
                base64_data = qr_base64.split(',')[1]
                image_data = base64.b64decode(base64_data)
                image = Image.open(io.BytesIO(image_data))
                print(f"   üñºÔ∏è  Image d√©cod√©e: {image.size[0]}x{image.size[1]} pixels")
                return True
            except Exception as e:
                print(f"   ‚ùå Erreur lors du d√©codage: {e}")
                return False
        else:
            print("   ‚ùå Format QR code base64 invalide")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test de la m√©thode: {e}")
        return False

def test_database_models():
    """Test des mod√®les de base de donn√©es"""
    print("\nüß™ Test des mod√®les de base de donn√©es...")
    
    try:
        # Test SessionAppel
        from school.models import SessionAppel
        print("   ‚úÖ Mod√®le SessionAppel accessible")
        
        # Test Presence
        from school.models import Presence
        print("   ‚úÖ Mod√®le Presence accessible")
        
        # V√©rifier les choix de m√©thode
        methode_choices = SessionAppel._meta.get_field('methode').choices
        qr_code_choice = any(choice[0] == 'QR_CODE' for choice in methode_choices)
        
        if qr_code_choice:
            print("   ‚úÖ Choix 'QR_CODE' disponible dans SessionAppel")
        else:
            print("   ‚ùå Choix 'QR_CODE' manquant dans SessionAppel")
            return False
        
        # V√©rifier les choix de m√©thode_detection
        detection_choices = Presence._meta.get_field('methode_detection').choices
        qr_detection_choice = any(choice[0] == 'QR_CODE' for choice in detection_choices)
        
        if qr_detection_choice:
            print("   ‚úÖ Choix 'QR_CODE' disponible dans Presence")
        else:
            print("   ‚ùå Choix 'QR_CODE' manquant dans Presence")
            return False
        
        print("   ‚úÖ Test des mod√®les r√©ussi !")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des mod√®les: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ D√©marrage des tests du syst√®me QR Code FaceTrack")
    print("=" * 60)
    
    tests = [
        test_database_models,
        test_qr_code_generation,
        test_qr_code_model_method,
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå Test {test.__name__} a √©chou√© avec une exception: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä R√©sultats des tests: {passed}/{total} r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! Le syst√®me QR code est pr√™t.")
        return True
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la configuration.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
