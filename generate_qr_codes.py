#!/usr/bin/env python3
"""
Script pour g√©n√©rer des QR codes pour tous les √©l√®ves FaceTrack
Ce script cr√©e des QR codes PNG pour chaque √©l√®ve bas√© sur leur matricule
"""

import os
import sys
import django
from django.conf import settings

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'FaceTrack.settings')
django.setup()

from school.models import Eleve
import qrcode
from PIL import Image, ImageDraw, ImageFont
import os

def create_qr_code_directory():
    """Cr√©e le r√©pertoire pour stocker les QR codes"""
    qr_dir = "qr_codes_eleves"
    if not os.path.exists(qr_dir):
        os.makedirs(qr_dir)
        print(f"üìÅ R√©pertoire cr√©√©: {qr_dir}")
    return qr_dir

def generate_qr_code_for_student(eleve, qr_dir):
    """G√©n√®re un QR code pour un √©l√®ve sp√©cifique"""
    try:
        # Cr√©er le QR code
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(eleve.matricule)
        qr.make(fit=True)
        
        # Cr√©er l'image
        img = qr.make_image(fill_color="black", back_color="white")
        
        # Redimensionner pour une meilleure lisibilit√©
        img = img.resize((400, 400), Image.Resampling.NEAREST)
        
        # Cr√©er une image plus grande avec des informations
        final_img = Image.new('RGB', (500, 600), 'white')
        draw = ImageDraw.Draw(final_img)
        
        # Coller le QR code
        final_img.paste(img, (50, 50))
        
        # Ajouter des informations textuelles
        try:
            # Essayer d'utiliser une police syst√®me
            font_large = ImageFont.truetype("arial.ttf", 24)
            font_small = ImageFont.truetype("arial.ttf", 16)
        except:
            # Fallback sur la police par d√©faut
            font_large = ImageFont.load_default()
            font_small = ImageFont.load_default()
        
        # Nom de l'√©l√®ve
        draw.text((250, 470), eleve.user.get_full_name(), fill='black', anchor='mm', font=font_large)
        
        # Matricule
        draw.text((250, 500), f"Matricule: {eleve.matricule}", fill='black', anchor='mm', font=font_small)
        
        # Classe
        draw.text((250, 525), f"Classe: {eleve.classe.nom}", fill='black', anchor='mm', font=font_small)
        
        # Date de g√©n√©ration
        from datetime import datetime
        date_str = datetime.now().strftime("%d/%m/%Y")
        draw.text((250, 550), f"G√©n√©r√© le: {date_str}", fill='gray', anchor='mm', font=font_small)
        
        # Ajouter un logo ou titre
        draw.text((250, 20), "FaceTrack - QR Code √âl√®ve", fill='#007bff', anchor='mm', font=font_large)
        
        # Sauvegarder
        filename = f"QR_{eleve.matricule}_{eleve.user.last_name}_{eleve.user.first_name}.png"
        filename = filename.replace(" ", "_").replace("-", "_")
        filepath = os.path.join(qr_dir, filename)
        
        final_img.save(filepath, "PNG", quality=95)
        
        return filepath, True
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la g√©n√©ration du QR code pour {eleve.user.get_full_name()}: {e}")
        return None, False

def main():
    """Fonction principale"""
    print("üöÄ G√©n√©ration des QR codes pour tous les √©l√®ves FaceTrack")
    print("=" * 70)
    
    # Cr√©er le r√©pertoire
    qr_dir = create_qr_code_directory()
    
    # R√©cup√©rer tous les √©l√®ves
    eleves = Eleve.objects.all().order_by('classe__nom', 'user__last_name', 'user__first_name')
    
    if not eleves:
        print("‚ùå Aucun √©l√®ve trouv√© dans la base de donn√©es")
        return
    
    print(f"üìö {eleves.count()} √©l√®ve(s) trouv√©(s)")
    print()
    
    # Statistiques par classe
    classes_count = {}
    for eleve in eleves:
        classe_nom = eleve.classe.nom
        classes_count[classe_nom] = classes_count.get(classe_nom, 0) + 1
    
    print("üìä R√©partition par classe:")
    for classe, count in sorted(classes_count.items()):
        print(f"   {classe}: {count} √©l√®ve(s)")
    print()
    
    # G√©n√©rer les QR codes
    success_count = 0
    error_count = 0
    
    for i, eleve in enumerate(eleves, 1):
        print(f"[{i:2d}/{len(eleves)}] üì± G√©n√©ration pour {eleve.user.get_full_name()}")
        print(f"      Classe: {eleve.classe.nom} | Matricule: {eleve.matricule}")
        
        filepath, success = generate_qr_code_for_student(eleve, qr_dir)
        
        if success:
            print(f"      ‚úÖ QR code g√©n√©r√©: {os.path.basename(filepath)}")
            success_count += 1
        else:
            print(f"      ‚ùå √âchec de la g√©n√©ration")
            error_count += 1
        
        print()
    
    # R√©sum√©
    print("=" * 70)
    print("üìä R√©sum√© de la g√©n√©ration:")
    print(f"   ‚úÖ Succ√®s: {success_count}")
    print(f"   ‚ùå √âchecs: {error_count}")
    print(f"   üìÅ R√©pertoire: {qr_dir}")
    
    if success_count > 0:
        print(f"\nüéâ {success_count} QR code(s) g√©n√©r√©(s) avec succ√®s !")
        print(f"üìÇ Les fichiers sont disponibles dans le r√©pertoire: {qr_dir}")
        
        # Lister quelques fichiers g√©n√©r√©s
        files = os.listdir(qr_dir)
        if files:
            print(f"\nüìã Exemples de fichiers g√©n√©r√©s:")
            for file in sorted(files)[:5]:
                print(f"   ‚Ä¢ {file}")
            if len(files) > 5:
                print(f"   ... et {len(files) - 5} autres")
    
    if error_count > 0:
        print(f"\n‚ö†Ô∏è  {error_count} erreur(s) rencontr√©e(s). V√©rifiez les logs ci-dessus.")
    
    print("\nüí° Conseil: Imprimez ces QR codes et distribuez-les aux √©l√®ves")
    print("   ou utilisez-les avec l'interface de scan QR de FaceTrack !")

if __name__ == "__main__":
    main()
