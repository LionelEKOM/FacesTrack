#!/usr/bin/env python3
"""
Script de cr√©ation d'utilisateurs r√©alistes avec g√©n√©ration automatique des QR codes
Cr√©e 25 √©l√®ves par classe, leurs parents, et g√©n√®re leurs QR codes
"""

import os
import sys
import django
from datetime import date, timedelta
import random
from faker import Faker
import qrcode

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'FaceTrack.settings')
django.setup()

from django.contrib.auth.hashers import make_password
from school.models import User, Classe, Eleve, Parent, Enseignant, Matiere
from django.db import transaction
from django.conf import settings

# Initialiser Faker pour des donn√©es r√©alistes
fake = Faker(['fr_FR'])

# Noms et pr√©noms fran√ßais courants
PRENOMS_FILLES = [
    'Emma', 'L√©a', 'Chlo√©', 'Jade', 'Alice', 'Lola', 'Manon', 'Jasmine', 'In√®s', 'Louise',
    'Camille', 'Sarah', 'Clara', 'Eva', 'L√©na', 'Zo√©', 'Nina', 'Ma√´lys', 'L√©onie', 'Romane',
    'Agathe', 'Julia', 'L√©ana', 'Mya', 'Emy', 'Luna', 'Th√©a', 'Lola', 'Nora', 'Ana√Øs'
]

PRENOMS_GARCONS = [
    'Lucas', 'Hugo', 'Jules', 'L√©o', 'Adam', 'Rapha√´l', 'Arthur', 'Louis', 'Ethan', 'Paul',
    'Antoine', 'Nathan', 'Tom', 'Th√©o', 'Eliott', 'Maxime', 'Enzo', 'Axel', 'Cl√©ment', 'Baptiste',
    'Alexandre', 'Victor', 'Gabriel', 'Tim√©o', 'Romain', 'Mathis', 'Evan', 'Noah', 'Sacha', 'Liam'
]

NOMS_FAMILLE = [
    'Martin', 'Bernard', 'Dubois', 'Thomas', 'Robert', 'Richard', 'Petit', 'Durand', 'Leroy', 'Moreau',
    'Simon', 'Laurent', 'Lefebvre', 'Michel', 'Garcia', 'David', 'Bertrand', 'Roux', 'Vincent', 'Fournier',
    'Morel', 'Girard', 'Andre', 'Lefevre', 'Mercier', 'Dupont', 'Lambert', 'Bonnet', 'Francois', 'Martinez'
]

def create_user_with_role(username, email, password, role, first_name, last_name):
    """Cr√©e un utilisateur avec un r√¥le sp√©cifique"""
    try:
        user = User.objects.create(
            username=username,
            email=email,
            password=make_password(password),
            first_name=first_name,
            last_name=last_name,
            role=role,
            is_active=True,
            date_joined=date.today(),
            telephone=fake.phone_number(),
            adresse=fake.address()
        )
        return user
    except Exception as e:
        print(f"Erreur lors de la cr√©ation de l'utilisateur {username}: {e}")
        return None

def generate_qr_code_for_student(matricule, nom_eleve):
    """G√©n√®re et sauvegarde le QR code pour un √©l√®ve"""
    try:
        # Cr√©er le QR code
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(matricule)
        qr.make(fit=True)
        
        # Cr√©er l'image
        img = qr.make_image(fill_color="black", back_color="white")
        
        # Cr√©er le dossier s'il n'existe pas
        qr_dir = os.path.join(settings.MEDIA_ROOT, 'qr_codes_eleves')
        os.makedirs(qr_dir, exist_ok=True)
        
        # Nom du fichier avec le nom de l'√©l√®ve pour plus de clart√©
        qr_filename = f"QR_{matricule}_{nom_eleve.replace(' ', '_')}.png"
        file_path = os.path.join(qr_dir, qr_filename)
        
        # Sauvegarder l'image
        img.save(file_path, format='PNG')
        
        return qr_filename
    except Exception as e:
        print(f"    ‚ö†Ô∏è  Erreur lors de la g√©n√©ration du QR code: {e}")
        return None

def create_eleve_with_parent_and_qr(classe, numero):
    """Cr√©e un √©l√®ve, son parent et g√©n√®re son QR code"""
    
    # D√©terminer le genre de l'√©l√®ve
    is_fille = random.choice([True, False])
    prenoms = PRENOMS_FILLES if is_fille else PRENOMS_GARCONS
    prenom_eleve = random.choice(prenoms)
    nom_famille = random.choice(NOMS_FAMILLE)
    
    # Cr√©er le parent
    prenom_parent = random.choice(PRENOMS_FILLES + PRENOMS_GARCONS)
    username_parent = f"parent_{nom_famille.lower()}_{prenom_parent.lower()}_{numero}"
    email_parent = f"{username_parent}@facetrack.fr"
    
    parent_user = create_user_with_role(
        username=username_parent,
        email=email_parent,
        password="parent123",
        role="PARENT",
        first_name=prenom_parent,
        last_name=nom_famille
    )
    
    if not parent_user:
        return None, None
    
    # Cr√©er l'objet Parent
    try:
        parent = Parent.objects.create(
            user=parent_user,
            profession=fake.job(),
            lieu_travail=fake.company()
        )
    except Exception as e:
        print(f"Erreur lors de la cr√©ation du parent {username_parent}: {e}")
        parent_user.delete()
        return None, None
    
    # Cr√©er l'√©l√®ve
    username_eleve = f"eleve_{nom_famille.lower()}_{prenom_eleve.lower()}_{numero}"
    email_eleve = f"{username_eleve}@facetrack.fr"
    
    eleve_user = create_user_with_role(
        username=username_eleve,
        email=email_eleve,
        password="eleve123",
        role="ELEVE",
        first_name=prenom_eleve,
        last_name=nom_famille
    )
    
    # Mettre √† jour la date de naissance dans l'utilisateur
    if eleve_user:
        eleve_user.date_naissance = fake.date_of_birth(minimum_age=10, maximum_age=18)
        eleve_user.save()
    
    if not eleve_user:
        parent_user.delete()
        parent.delete()
        return None, None
    
    # Cr√©er l'objet Eleve (le matricule sera g√©n√©r√© automatiquement)
    try:
        eleve = Eleve.objects.create(
            user=eleve_user,
            classe=classe,
            parent=parent
        )
        
        # G√©n√©rer le QR code pour cet √©l√®ve
        nom_complet = f"{prenom_eleve}_{nom_famille}"
        qr_filename = generate_qr_code_for_student(eleve.matricule, nom_complet)
        
        if qr_filename:
            print(f"    üéØ QR code g√©n√©r√©: {qr_filename}")
        else:
            print(f"    ‚ö†Ô∏è  QR code non g√©n√©r√©")
            
    except Exception as e:
        print(f"Erreur lors de la cr√©ation de l'√©l√®ve {username_eleve}: {e}")
        eleve_user.delete()
        parent_user.delete()
        parent.delete()
        return None, None
    
    return eleve, parent

def create_enseignants():
    """Cr√©e des enseignants pour les mati√®res"""
    matieres = Matiere.objects.all()
    enseignants_crees = []
    
    for matiere in matieres:
        prenom = random.choice(PRENOMS_FILLES + PRENOMS_GARCONS)
        nom = random.choice(NOMS_FAMILLE)
        username = f"enseignant_{nom.lower()}_{prenom.lower()}"
        email = f"{username}@facetrack.fr"
        
        enseignant_user = create_user_with_role(
            username=username,
            email=email,
            password="enseignant123",
            role="ENSEIGNANT",
            first_name=prenom,
            last_name=nom
        )
        
        if enseignant_user:
            try:
                enseignant = Enseignant.objects.create(
                    user=enseignant_user,
                    specialite=matiere,
                    date_embauche=fake.date_between(start_date='-10y', end_date='-1y')
                )
                # Ajouter la mati√®re √† l'enseignant
                enseignant.matieres.add(matiere)
                # Ajouter quelques classes √† l'enseignant
                classes_enseignant = Classe.objects.all()[:3]  # Prendre les 3 premi√®res classes
                enseignant.classes.add(*classes_enseignant)
                
                enseignants_crees.append(enseignant)
                print(f"‚úÖ Enseignant cr√©√©: {prenom} {nom} - {matiere.nom}")
            except Exception as e:
                print(f"‚ùå Erreur lors de la cr√©ation de l'enseignant {username}: {e}")
                enseignant_user.delete()
    
    return enseignants_crees

def main():
    """Fonction principale"""
    print("üöÄ D√©but de la cr√©ation des utilisateurs r√©alistes avec QR codes...")
    print("=" * 70)
    
    # V√©rifier que les classes existent
    classes = Classe.objects.all()
    if not classes.exists():
        print("‚ùå Aucune classe trouv√©e. Cr√©ez d'abord les classes.")
        return
    
    print(f"üìö Classes trouv√©es: {classes.count()}")
    
    # V√©rifier que les mati√®res existent
    matieres = Matiere.objects.all()
    if not matieres.exists():
        print("‚ùå Aucune mati√®re trouv√©e. Cr√©ez d'abord les mati√®res.")
        return
    
    print(f"üìñ Mati√®res trouv√©es: {matieres.count()}")
    
    # Cr√©er des enseignants
    print("\nüë®‚Äçüè´ Cr√©ation des enseignants...")
    enseignants = create_enseignants()
    
    # Cr√©er des √©l√®ves et parents pour chaque classe
    total_eleves = 0
    total_parents = 0
    total_qr_codes = 0
    
    with transaction.atomic():
        for classe in classes:
            print(f"\nüë• Cr√©ation des utilisateurs pour la classe {classe.nom}...")
            
            eleves_classe = 0
            parents_classe = 0
            qr_codes_classe = 0
            
            for i in range(1, 26):  # 25 √©l√®ves par classe
                eleve, parent = create_eleve_with_parent_and_qr(classe, i)
                
                if eleve and parent:
                    eleves_classe += 1
                    parents_classe += 1
                    qr_codes_classe += 1
                    print(f"  ‚úÖ √âl√®ve {eleve.user.first_name} {eleve.user.last_name} cr√©√© (Parent: {parent.user.first_name} {parent.user.last_name})")
                else:
                    print(f"  ‚ùå √âchec de cr√©ation de l'√©l√®ve {i} pour la classe {classe.nom}")
            
            total_eleves += eleves_classe
            total_parents += parents_classe
            total_qr_codes += qr_codes_classe
            
            print(f"  üìä Classe {classe.nom}: {eleves_classe} √©l√®ves, {parents_classe} parents, {qr_codes_classe} QR codes")
    
    # R√©sum√© final
    print("\n" + "=" * 70)
    print("üéâ CR√âATION TERMIN√âE !")
    print("=" * 70)
    print(f"üìö Classes trait√©es: {classes.count()}")
    print(f"üë®‚Äçüè´ Enseignants cr√©√©s: {len(enseignants)}")
    print(f"üë• √âl√®ves cr√©√©s: {total_eleves}")
    print(f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Parents cr√©√©s: {total_parents}")
    print(f"üéØ QR codes g√©n√©r√©s: {total_qr_codes}")
    print(f"üë§ Total utilisateurs: {total_eleves + total_parents + len(enseignants)}")
    
    print("\nüîë Informations de connexion:")
    print("  ‚Ä¢ √âl√®ves: username = eleve_nom_prenom_numero, password = eleve123")
    print("  ‚Ä¢ Parents: username = parent_nom_prenom_numero, password = parent123")
    print("  ‚Ä¢ Enseignants: username = enseignant_nom_prenom, password = enseignant123")
    
    print(f"\nüìÅ QR codes sauvegard√©s dans: {os.path.join(settings.MEDIA_ROOT, 'qr_codes_eleves')}")
    print(f"üîó URL d'acc√®s: /media/qr_codes_eleves/")
    
    print("\n‚ö†Ô∏è  ATTENTION: Changez ces mots de passe en production !")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Cr√©ation interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
