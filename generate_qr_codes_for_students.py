#!/usr/bin/env python3
"""
Script de g√©n√©ration des QR codes pour tous les √©l√®ves FaceTrack
G√©n√®re et sauvegarde les QR codes bas√©s sur les matricules des √©l√®ves
"""

import os
import django
import qrcode
from datetime import datetime

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'FaceTrack.settings')
django.setup()

from school.models import Eleve
from django.conf import settings

def generate_qr_code_image(matricule, filename):
    """G√©n√®re une image QR code et la sauvegarde"""
    try:
        # Cr√©er le QR code
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(matricule)
        qr.make(fit=True)
        
        # Cr√©er l'image
        img = qr.make_image(fill_color="black", back_color="white")
        
        # Cr√©er le dossier s'il n'existe pas
        qr_dir = os.path.join(settings.MEDIA_ROOT, 'qr_codes_eleves')
        os.makedirs(qr_dir, exist_ok=True)
        
        # Chemin complet du fichier
        file_path = os.path.join(qr_dir, filename)
        
        # Sauvegarder l'image
        img.save(file_path, format='PNG')
        
        return file_path
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du QR code pour {matricule}: {e}")
        return None

def generate_qr_codes_for_all_students():
    """G√©n√®re les QR codes pour tous les √©l√®ves"""
    print("üöÄ D√©but de la g√©n√©ration des QR codes pour tous les √©l√®ves...")
    print("=" * 70)
    
    # R√©cup√©rer tous les √©l√®ves
    eleves = Eleve.objects.select_related('user', 'classe').all()
    total_eleves = eleves.count()
    
    if total_eleves == 0:
        print("‚ùå Aucun √©l√®ve trouv√© dans la base de donn√©es.")
        return
    
    print(f"üìö Total d'√©l√®ves trouv√©s: {total_eleves}")
    print()
    
    # Statistiques
    qr_codes_generes = 0
    qr_codes_existants = 0
    erreurs = 0
    
    # Parcourir tous les √©l√®ves
    for i, eleve in enumerate(eleves, 1):
        matricule = eleve.matricule
        nom_eleve = eleve.user.get_full_name()
        classe = eleve.classe.nom
        
        print(f"[{i:3d}/{total_eleves}] {nom_eleve} - {classe} - {matricule}")
        
        # V√©rifier si le QR code existe d√©j√†
        qr_filename = f"QR_{matricule}.png"
        qr_dir = os.path.join(settings.MEDIA_ROOT, 'qr_codes_eleves')
        qr_path = os.path.join(qr_dir, qr_filename)
        
        if os.path.exists(qr_path):
            print(f"    ‚úÖ QR code d√©j√† existant: {qr_filename}")
            qr_codes_existants += 1
            continue
        
        # G√©n√©rer le QR code
        qr_path = generate_qr_code_image(matricule, qr_filename)
        
        if qr_path:
            print(f"    üéØ QR code g√©n√©r√©: {qr_filename}")
            qr_codes_generes += 1
        else:
            print(f"    ‚ùå √âchec de g√©n√©ration du QR code")
            erreurs += 1
    
    # R√©sum√© final
    print("\n" + "=" * 70)
    print("üéâ G√âN√âRATION DES QR CODES TERMIN√âE !")
    print("=" * 70)
    print(f"üìä Statistiques:")
    print(f"  ‚Ä¢ Total d'√©l√®ves: {total_eleves}")
    print(f"  ‚Ä¢ QR codes g√©n√©r√©s: {qr_codes_generes}")
    print(f"  ‚Ä¢ QR codes existants: {qr_codes_existants}")
    print(f"  ‚Ä¢ Erreurs: {erreurs}")
    print(f"  ‚Ä¢ Total QR codes: {qr_codes_generes + qr_codes_existants}")
    
    if qr_codes_generes > 0:
        print(f"\nüìÅ QR codes sauvegard√©s dans: {os.path.join(settings.MEDIA_ROOT, 'qr_codes_eleves')}")
        print(f"üîó URL d'acc√®s: /media/qr_codes_eleves/")
    
    print(f"\n‚ö†Ô∏è  Note: Les QR codes contiennent le matricule de l'√©l√®ve pour l'identification")

def generate_qr_code_for_specific_student(matricule):
    """G√©n√®re un QR code pour un √©l√®ve sp√©cifique"""
    try:
        eleve = Eleve.objects.get(matricule=matricule)
        nom_eleve = eleve.user.get_full_name()
        classe = eleve.classe.nom
        
        print(f"üéØ G√©n√©ration du QR code pour: {nom_eleve} - {classe} - {matricule}")
        
        qr_filename = f"QR_{matricule}.png"
        qr_path = generate_qr_code_image(matricule, qr_filename)
        
        if qr_path:
            print(f"‚úÖ QR code g√©n√©r√© avec succ√®s: {qr_filename}")
            print(f"üìÅ Fichier sauvegard√©: {qr_path}")
        else:
            print(f"‚ùå √âchec de la g√©n√©ration du QR code")
            
    except Eleve.DoesNotExist:
        print(f"‚ùå Aucun √©l√®ve trouv√© avec le matricule: {matricule}")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

def main():
    """Fonction principale"""
    import sys
    
    if len(sys.argv) > 1:
        # Si un matricule est fourni en argument, g√©n√©rer le QR code pour cet √©l√®ve
        matricule = sys.argv[1]
        generate_qr_code_for_specific_student(matricule)
    else:
        # Sinon, g√©n√©rer les QR codes pour tous les √©l√®ves
        generate_qr_codes_for_all_students()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  G√©n√©ration interrompue par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
